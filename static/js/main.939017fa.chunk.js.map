{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["mergeSort","array","l","r","animations","m","Math","floor","sortArray","i","j","push","merge","quickSort","pivot","partitionArray","swap","firstIndex","secondIndex","temp","WINDOW_HEIGHT","window","innerHeight","SortingVisualizer","innerWidth","props","state","resetArray","bind","bubbleSort","heapSort","this","min","max","random","setState","console","log","length","sortingAlgorithms","arrayBars","document","getElementsByClassName","idx1","idx2","setTimeout","style","backgroundColor","idx","newHeight","height","animation","swapped","className","map","value","key","onClick","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.939017fa.chunk.js","sourcesContent":["export const getBubbleSortAnimations = (array) => {\r\n    const animation = [];\r\n    for(let i = 0; i < array.length - 1; i++) {\r\n        let swapped = false;\r\n        for(let j = 0; j < array.length - i - 1; j++) {\r\n            animation.push([\"compare1\", j]);\r\n            animation.push([\"compare2\", j]);\r\n            if(array[j] > array[j + 1]) {\r\n                swapped = true;\r\n                animation.push([\"swap\", j]);\r\n                let temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n            }\r\n        }\r\n        if(swapped === false) break;\r\n    }\r\n    return animation;\r\n}\r\n\r\nexport const getMergeSortAnimations = (array) => {\r\n    let animations = [];\r\n    mergeSort(array, 0, array.length - 1, animations);\r\n    return [animations, array];\r\n}\r\n\r\nconst merge = (array, l, m, r, animations) => {\r\n    let sortArray = [];\r\n    let i = l, j = m + 1;\r\n    while(i <= m && j <= r) {\r\n        animations.push([\"compare1\", i, j]);\r\n        animations.push([\"compare2\", i, j]);\r\n        if(array[i] < array[j]) {\r\n            sortArray.push(array[i++]);\r\n        } else {\r\n            sortArray.push(array[j++]);\r\n        }\r\n    }\r\n    while(i <= m) {\r\n        animations.push([\"compare1\", i, i]);\r\n        animations.push([\"compare2\", i, i]);\r\n        sortArray.push(array[i++]);\r\n    }\r\n    while(j <= r) {\r\n        animations.push([\"compare1\", j, j]);\r\n        animations.push([\"compare2\", j, j]);\r\n        sortArray.push(array[j++]);\r\n    }\r\n    for(let i = l; i <= r; i++) {\r\n        if(array[i] !== sortArray[i - l]) {\r\n            animations.push([\"overwrite\", i, sortArray[i - l]]);\r\n        }\r\n        array[i] = sortArray[i - l];\r\n    }\r\n\r\n}\r\n\r\nconst mergeSort = (array, l, r, animations) => {\r\n    if(l === r) return;\r\n    const m = Math.floor((l + r) / 2);\r\n    mergeSort(array, l, m, animations);\r\n    mergeSort(array, m + 1, r, animations);\r\n    merge(array, l, m, r, animations);\r\n}\r\n\r\nexport const getQuickSortAnimations = (array) => {\r\n    let animations = [];\r\n    quickSort(array, 0, array.length - 1, animations);\r\n    return [animations, array];\r\n}\r\n\r\nconst quickSort = (array, l, r, animations) => {\r\n    let pivot;\r\n    if(l < r) {\r\n        pivot = partitionArray(array, l, r, animations);\r\n        quickSort(array, l, pivot - 1, animations);\r\n        quickSort(array, pivot + 1, r, animations);\r\n    }\r\n}\r\n\r\nconst partitionArray = (array, l, r, animations) => {\r\n    let i = l;\r\n    animations.push([\"compare1\", r, r]);\r\n    for(let j = l; j < r; j++) {\r\n        animations.push([\"compare1\", j, r]);\r\n        animations.push([\"compare2\", j, r]);\r\n        if(array[j] <= array[r]) {\r\n            animations.push([\"swap\", j, i]);\r\n            swap(array, j, i);\r\n            i++;\r\n        }\r\n    }\r\n    animations.push([\"compare2\", r, r]);\r\n    swap(array, i, r);\r\n    animations.push([\"swap\", i, r]);\r\n    return i;\r\n}\r\n\r\nexport const heapSort = (array) => {\r\n    return array;\r\n}\r\n\r\nfunction swap(array, firstIndex, secondIndex) {\r\n    let temp = array[firstIndex];\r\n    array[firstIndex] = array[secondIndex];\r\n    array[secondIndex] = temp;\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css'\r\nimport * as sortingAlgorithms from './../sortingAlgorithms/sortingAlgorithms.js'\r\n\r\nlet WINDOW_HEIGHT = window.innerHeight;\r\nlet WINDOW_WIDTH = window.innerWidth;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n\r\n        this.resetArray = this.resetArray.bind(this);\r\n        this.mergeSort = this.mergeSort.bind(this);\r\n        this.quickSort = this.quickSort.bind(this);\r\n        this.bubbleSort = this.bubbleSort.bind(this);\r\n        this.heapSort = this.heapSort.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n    \r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < 90; i++){\r\n            array.push(randomIntFromInterval(5, WINDOW_HEIGHT - 30));\r\n        }\r\n        this.setState({array});\r\n        console.log(array);\r\n    }\r\n\r\n    mergeSort() {\r\n        const [animations, sortArray] = sortingAlgorithms.getMergeSortAnimations(this.state.array);\r\n        console.log(sortArray);\r\n        for(let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(animations[i][0] === \"compare1\") {\r\n                const idx1 = animations[i][1];\r\n                const idx2 = animations[i][2];\r\n                setTimeout(() => {     \r\n                    arrayBars[idx1].style.backgroundColor = 'red';\r\n                    arrayBars[idx2].style.backgroundColor = 'red';\r\n                }, i * 20);\r\n            } else if(animations[i][0] === \"compare2\") {\r\n                const idx1 = animations[i][1];\r\n                const idx2 = animations[i][2];\r\n                setTimeout(() => {     \r\n                    arrayBars[idx1].style.backgroundColor = 'turquoise';\r\n                    arrayBars[idx2].style.backgroundColor = 'turquoise';\r\n                }, i * 20);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [overwrite, idx, newHeight] = animations[i];\r\n                    arrayBars[idx].style.height = `${newHeight}px`;\r\n                }, i * 20);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n        let [animations, array] = sortingAlgorithms.getQuickSortAnimations(this.state.array);\r\n        for(let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(animations[i][0] === \"compare1\") {\r\n                const idx1 = animations[i][1];\r\n                const idx2 = animations[i][2];\r\n                setTimeout(() => {     \r\n                    arrayBars[idx1].style.backgroundColor = 'red';\r\n                    arrayBars[idx2].style.backgroundColor = 'red';\r\n                }, i * 20);\r\n            } else if(animations[i][0] === \"compare2\") {\r\n                const idx1 = animations[i][1];\r\n                const idx2 = animations[i][2];\r\n                setTimeout(() => {     \r\n                    arrayBars[idx1].style.backgroundColor = 'turquoise';\r\n                    arrayBars[idx2].style.backgroundColor = 'turquoise';\r\n                }, i * 20);\r\n            } else {\r\n                const idx1 = animations[i][1];\r\n                const idx2 = animations[i][2];\r\n                setTimeout(() => {\r\n                    let temp = arrayBars[idx1].style.height; \r\n                    arrayBars[idx1].style.height = arrayBars[idx2].style.height;\r\n                    arrayBars[idx2].style.height = temp;\r\n                }, i * 20);\r\n            }\r\n        }\r\n        console.log(array);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = sortingAlgorithms.getBubbleSortAnimations(this.state.array);\r\n        for(let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(animations[i][0] === \"compare1\") {\r\n                const idx1 = animations[i][1];\r\n                setTimeout(() => {     \r\n                    arrayBars[idx1].style.backgroundColor = 'red';\r\n                    arrayBars[idx1 + 1].style.backgroundColor = 'red';\r\n                }, i * 20);\r\n            } else if(animations[i][0] === \"compare2\") {\r\n                const idx1 = animations[i][1];\r\n                setTimeout(() => {     \r\n                    arrayBars[idx1].style.backgroundColor = 'turquoise';\r\n                    arrayBars[idx1 + 1].style.backgroundColor = 'turquoise';\r\n                }, i * 20);\r\n            } else {\r\n                const idx1 = animations[i][1];\r\n                setTimeout(() => {\r\n                    let temp = arrayBars[idx1].style.height; \r\n                    arrayBars[idx1].style.height = arrayBars[idx1 + 1].style.height;\r\n                    arrayBars[idx1 + 1].style.height = temp;\r\n                }, i * 20);\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort() {\r\n        let array = sortingAlgorithms.heapSort(this.state.array);\r\n        this.setState({array});\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <>\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div \r\n                        className=\"array-bar\" \r\n                        key={idx} \r\n                        style={{height: `${value}px`}}>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"buttons\">\r\n            <button onClick={this.resetArray}>Generate New Array</button>\r\n                <button onClick={this.mergeSort}>Merge Sort</button>\r\n                <button onClick={this.quickSort}>Quick Sort</button>\r\n                <button onClick={this.bubbleSort}>Bubble Sort</button>\r\n                <button onClick={this.heapSort}>Heap Sort</button>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}